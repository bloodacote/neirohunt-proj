// WAFLE Engine (v.exp-2b)
// Author: Bloodacote 
// Compiled at: 2024-01-07 20:39:17 
//
 class WafleCore { constructor() { this.name = "Wafle"; this.author = "Bloodacote"; this.version = "alpha"; this.options = {}; };say(text) { console.log(`[${this.name}] => ${text}`); } } var wafle = new WafleCore(); wafle.say(`Wafle core loaded`); wafle.options.disableCacheLinks = true; function removeCacheURL(url) { var timestamp = "?t=" + Date.now(); return url + timestamp; };async function loadCSS(url) { return new Promise(function (resolve, reject) { if (url.slice(url.length - 4) != ".css") { url += ".css"; };if (wafle.options.disableCacheLinks == true) { url = removeCacheURL(url); };var styleElem = document.createElement("link"); styleElem.rel = "stylesheet"; styleElem.href = url; styleElem.onload = function () { resolve(true); };document.head.appendChild(styleElem); }); };async function loadURL(url, data = null, method = "POST", headers = {}) { return new Promise(function (resolve, reject) { var xhr = new XMLHttpRequest(); xhr.open(method, url, true); for (let [headType, headValue] of Object.entries(headers)) { xhr.setRequestHeader(headType, headValue); };xhr.onload = function() { if (xhr.status >= 200 && xhr.status <= 299) { resolve(xhr.responseText); } }; xhr.send(JSON.stringify(data)); }); };async function loadAPI(url, data = null, method = "POST", headers = {}) { var jsonData = await loadURL(url, data, method, headers); try { jsonData = JSON.parse(jsonData); return jsonData; } catch (err) { wafle.say(`API выдал не JSON! [${url}] \n Вывод: ${jsonData}`, "error"); } } async function loadJSON(url) { var jsonData = await loadURL(url, null, "GET"); try { jsonData = JSON.parse(jsonData); return jsonData; } catch (err) { wafle.say(`JSON имеет неверный формат! [${url}] Вывод: ${jsonData}`, "error"); } } async function runScriptsFromHTML(pageText) { var startIndex = pageText.indexOf('<script>'); var endIndex = pageText.indexOf('</script>', startIndex); while (startIndex !== -1 && endIndex !== -1) { var scriptCode = pageText.substring(startIndex + 8, endIndex); eval(scriptCode); startIndex = pageText.indexOf('<script>', endIndex); endIndex = pageText.indexOf('</script>', startIndex); };return pageText; };wafle.say(`(Load funcs) loaded`);  class EditableElem { constructor(elem) { this.selector = null; this.element = toElem(elem); this.parent = null; this.func = {}; this.init(); };init() { this.selector = this.getSelector(); this.parent = this.element.parentNode; };place(parentElem) { parentElem = toElem(parentElem); parentElem.appendChild(this.element); this.init(); };insertBefore(otherElem) { otherElem = toElem(otherElem); var parentElem = otherElem.parentNode; parentElem.insertBefore(this.element, otherElem); this.init(); };insertAfter(otherElem) { otherElem = toElem(otherElem); var parentElem = otherElem.parentNode; this.insertBefore(otherElem); toEdit(otherElem).insertBefore(this); this.init(); };find(selector) { var elem = this.element.querySelectorAll(selector); if (elem.length == 1) { elem = elem[0]; };return elem; };delete() { this.parent.removeChild(this.element); };getContent() { return this.element.innerHTML; };setHTML(content) { this.element.innerHTML = content; };setText(content) { this.element.innerText = content; };getValue() { return this.element.value; };setValue(val) { this.element.value = val; };replace(replaceList) { var content = this.element.innerHTML; for (let [key, value] of Object.entries(replaceList)) { content = content.replace(key, value); };this.element.innerHTML = content; };getSelector() { var selector = ""; selector += this.element.tagName; selector += "#" + this.element.id; for (let className of this.element.classList) { selector += "." + className; } selector = selector.toLowerCase(); return selector; } setSelector(selector) { var selParts = selectorSplit(selector); this.element.id = selParts.id; this.element.classList.value = selParts.classes.join(" "); } getId() { return this.element.id; } setId(newId) { this.element.id = newId; } setClass(classList) { if (typeof(classList) == "array") { this.element.classList.value = classList.join(" "); } else { this.element.classList.value = classList; } } addClass(className) { this.element.classList.add(className); } removeClass(className) { this.element.classList.remove(className); } setParam(key, value) { this.element.setAttribute(key, value); } getParam(key) { return this.element.getAttribute(key); } addFunc(key, func) { this.func[key] = func.bind(this); } removeFunc(key) { this.func[key] = undefined; } } function selectorSplit(selector) { var elemTag = ""; var elemId = ""; var elemClasses = []; selector = selector.replaceAll(" ", ""); var selectorSplitter = selector.split("#"); if (selectorSplitter.length != 1) { elemTag = selectorSplitter[0]; selectorSplitter = selector.split("."); elemId = selectorSplitter[0].split("#")[1]; elemClasses = selectorSplitter.slice(1); } else { selectorSplitter = selector.split("."); elemTag = selectorSplitter[0]; elemClasses = selectorSplitter.slice(1); } if (elemTag == "") { elemTag = "div"; } return { tag: elemTag, id: elemId, classes: elemClasses }; } function toElem(elem) { if (elem instanceof EditableElem) { elem = elem.element; } if (typeof(elem) == "string") { elem = document.querySelectorAll(elem); if (elem.length == 1) { elem = elem[0]; } } return elem; } function toEdit(elem) { if (elem instanceof EditableElem) { elem = elem; } else { elem = new EditableElem(elem); } return elem; } function newElem(selector, parent = null, content = null) { var selectorInfo = selectorSplit(selector); var newElem = document.createElement(selectorInfo.tag); newElem.id = selectorInfo.id; newElem.classList.value = selectorInfo.classes.join(" "); if (parent != null) { toElem(parent).appendChild(newElem); } newElem.innerHTML = content; if (newElem.innerHTML == null) { newElem.value = content; } return newElem; } function newEdit(selector, parent = null, content = null, funcs = {}) { var clonedEdit = newElem(selector, parent, content); clonedEdit = toEdit(clonedEdit); for (let [funcKey, funcAct] of Object.entries(funcs)) { clonedEdit.addFunc(funcKey, funcAct); } return clonedEdit; } function cloneElem(origElem, parent = null, elemId = "") { origElem = toEdit(origElem); var clonedElem = newElem( origElem.selector, parent, origElem.getHTML ); clonedElem.value = origElem.getValue(); clonedElem.id = elemId; return clonedElem; } function cloneEdit(origEdit, parent = null, elemId = "") { origEdit = toEdit(origEdit); var newEdit = newEdit( origEdit.selector, parent, origEdit.getHTML, origEdit.funcs ); newEdit.value = origEdit.getValue(); newEdit.id = elemId; return newEdit; };wafle.say(`(PartOS Ultra) loaded`);  function setCookie(key, value, path = "/", expires = "") { key = encodeURIComponent(key); value = encodeURIComponent(value); var pathParam = ""; if (path != null) { pathParam = `path=${path}; `; } var expiresParam = ""; if (expires != null) { expiresParam = `expires=${expires};`; } document.cookie = `${key}=${value}; ${pathParam} ${expiresParam}`; } function getCookie(key) { const name = key + "="; const decodedCookie = decodeURIComponent(document.cookie); const cookieArray = decodedCookie.split(';'); for (let i = 0; i < cookieArray.length; i++) { let cookie = cookieArray[i].trim(); if (cookie.indexOf(name) === 0) { return cookie.substring(name.length, cookie.length); } } return null; } function clearCookie(key = null) { if (key != null) { setCookie(key, null, "/", "Thu, 01 Jan 1970 00:00:00 UTC"); } else { const cookies = document.cookie.split(";"); for (let i = 0; i < cookies.length; i++) { const cookie = cookies[i]; const eqPos = cookie.indexOf("="); const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie; document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;"; } } } function getAllCookies() { const cookies = document.cookie.split(";"); const cookiesObject = {}; for (let i = 0; i < cookies.length; i++) { const cookie = cookies[i].trim(); const eqPos = cookie.indexOf("="); const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie; const value = eqPos > -1 ? cookie.substr(eqPos + 1) : ""; cookiesObject[name] = decodeURIComponent(value); };return cookiesObject; } class LinkNavigator { constructor(defaultPage = "/index.html", notExistPage = "/404.html") { this.linkMap = {}; this.defaultPage = defaultPage; this.notExistPage = notExistPage; };getMap() { return this.linkMap; };setMap(map) { this.linkMap = map; return map; };findLink(link) { var result = null; if (link == "/") { return this.defaultPage; } else { var newLink = link.split("?"); newLink = newLink[0]; newLink = newLink + "/"; for (let [page, pagePath] of Object.entries(this.linkMap)) { page = page + "/"; if (newLink.startsWith(page) == true) { result = pagePath; } } };if (result == null) { return this.notExistPage; };return result; } } function getLink(link = window.location.href) { return link; };function getLinkParts(link = window.location.pathname) { var url = link; url = url.split("/"); url = url.filter( function(part) { if (part != "") { return part; } } ); return url; };function gotoLink(url) { window.location.href = url; };function changeLink(url) { history.pushState(null, null, url); }